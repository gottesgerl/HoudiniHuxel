{
	"fileversion":"20.5.304",
	"name":"backup_huxel_nodegraph_main",
	"categories":"Standard",
	"pane":"network",
	"label":"zzBackup_Huxel - Nodegraph   __main__",
	"type":"script_submenu",
	"script":"# Fill the cardinal directios (N, S, E, W) first, then the diagonals\n#slots = (\"n\", \"s\", \"e\", \"w\", \"ne\", \"se\", \"nw\", \"sw\")\ndesktop = hou.ui.curDesktop()\np = hou.ui.paneUnderCursor()\npp = p.currentTab()\n\ncp = pp.cursorPosition(confine_to_view=False)\ncp_screen = pp.posToScreen(cp)\npane_size = pp.size()\npath = pp.pwd().path()\n\n\n\npadding = 100\nmax_distance = 2\n\npos1 = hou.Vector2(0,0)\npos2 = hou.Vector2(pane_size[0], pane_size[1])\nallItems = pp.networkItemsInBox(pos1, pos2, for_drop=\"False\", for_select=\"False\")\nallNodes = [ i[0] for i in allItems if i[1]=='node']\n#allDistances = { i:i.position().distanceTo(cp) for i in allNodes }\nallDistances = { i:pp.itemRect(i).closestPoint(cp).distanceTo(cp) for i in allNodes }\nnodesByDistance = {k: v for k, v in sorted(allDistances.items(), key=lambda item: item[1])}\nnodes = list(nodesByDistance.keys())\nparent = hou.node(path)\ncontext = parent.childTypeCategory().name()[:3].lower()\n\nprint(\"Context: %s \" %(context))\n\nif nodes:\n    closestnode = nodes[0]\n    type = closestnode.type()\n    #check if close enough\n    shortest_dist = (list(nodesByDistance.values())[0])\n    if shortest_dist > max_distance:\n        if context == \"obj\": hou.ui.injectRadialMenu(\"huxel_nodegraph_obj_create\")\n        elif context == \"sop\": hou.ui.injectRadialMenu(\"huxel_nodegraph_obj_create\")\n    else:\n        # check for available menus:\n        # if there is a dynamic menu (*_dyn) use it\n        # elif use the static menu\n        # if none is found use the default one.\n        radialname_static = (\"huxel_nodegraph_%s_%s\" %(context, type.name()))\n        radialname_dyn = radialname_static + (\"_dyn\")\n        radialname = \"huxel_nodegraph_undefined_dyn\"\n        availableRMs = [ i.name() for i in hou.ui.radialMenus()]\n        if (radialname_dyn in availableRMs): radialname = radialname_dyn\n        elif (radialname_static in availableRMs): radialname = radialname_static\n        \n        print(\"Nodetype: %s - Radialname: %s\" %(type.name(), radialname))\n        \n        #inject the radial menu\n        hou.ui.injectRadialMenu(radialname)   \nelse:\n    if context == \"obj\": hou.ui.injectRadialMenu(\"huxel_general_main\")\n    elif context == \"sop\": hou.ui.injectRadialMenu(\"huxel_nodegraph_sop_create\")\n    else: hou.ui.setStatusMessage(\"Still to come.\", hou.severityType.ImportantMessage)\n"
}
