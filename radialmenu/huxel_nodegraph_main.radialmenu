{
	"fileversion":"20.5.304",
	"name":"huxel_nodegraph_main",
	"categories":"Standard",
	"pane":"network",
	"label":"Huxel - Nodegraph   __main__",
	"type":"script_submenu",
	"script":"import os\nimport json\nimport importlib\nimport huxelradialmenus.commontools as commontools\n\nimportlib.reload(commontools)\n\n#-----------------------------------------\n#\n#   Handles All Nodegraph Radial Menus\n#\n#-----------------------------------------\n\n\n# Get closest node\nmax_distance = 2\n\nkwargs = commontools.getClosestNode()\nnode = hou.node(kwargs[\"path\"])\ncontext = kwargs[\"context\"]\ndistance = float(kwargs[\"distance\"])\n\nif node:\n    nodetype = node.type()\n    if distance > max_distance:\n        if context == \"obj\": hou.ui.injectRadialMenu(\"huxel_nodegraph_obj_create\")\n        elif context == \"sop\": hou.ui.injectRadialMenu(\"huxel_nodegraph_sop_create\")\n    else:\n        # check for available menus:\n        # if there is a radial menu in the list use it\n        # else look for a json file and build one radial menu on the fly\n        # if no json file is found use a default radial menu.\n        ntype = nodetype.name()\n        radialname_static = (\"huxel_nodegraph_%s_%s\" %(context, ntype))\n        radialname = \"huxel_nodegraph_undefined_dyn\"\n        availableRMs = [ i.name() for i in hou.ui.radialMenus()]\n        if (radialname_static in availableRMs): radialname = radialname_static\n        \n        #build menu from json file\n        huxelpath = hou.getenv(\"Huxel\")\n        modulepath = (\"huxelradialmenus.nodegraph.%s.%s.%s\" %(context, ntype, ntype))\n        \n        file = \"%s/scripts/python/huxelradialmenus/nodegraph/%s/%s/%s.json\" %(huxelpath, context, ntype, ntype)\n        if os.path.isfile(file):  \n            menu = {}            \n            with open(file, \"r\") as json_file:\n                input = json.load(json_file)              \n                for dir, values in input.items():\n                    menu[dir] = {}\n                    for value in values:\n                        for k, v in value.items():\n                            #import modules\n                            if k == \"script\":\n                                if os.path.isfile(file.replace(\".json\", \".py\")):\n                                    #v=(\"%s(%s)\" %(v, kwargs))\n                                    v=v.replace(\"kwargs\", str(kwargs))\n                                    print(modulepath)\n                                    module = importlib.import_module(modulepath)\n                                    commontools = importlib.import_module(\"huxelradialmenus.commontools\")\n                            menu[dir][k]=v\n            radialmenu.setRadialMenu(menu)\n        #or load existing/default radial menu\n        else:\n            hou.ui.injectRadialMenu(radialname)\n\nelse:\n    if context == \"obj\": hou.ui.injectRadialMenu(\"huxel_general_main\")\n    elif context == \"sop\": hou.ui.injectRadialMenu(\"huxel_nodegraph_sop_create\")\n    else: hou.ui.setStatusMessage(\"Still to come.\", hou.severityType.ImportantMessage)\n"
}
