{
	"fileversion":"20.5.304",
	"name":"backup_huxel_sceneviewer_main",
	"categories":"Standard",
	"pane":"scene",
	"label":"zBACKUP__Huxel SceneViewer MAIN",
	"type":"script_submenu",
	"script":"#########################################\n#\n#       huxel sceneviewer main\n#\n#       sets camera and viewport settings in the 3d viewer under the mouse pointer\n#\n#########################################       \n\nfrom PySide2 import QtCore\nfrom PySide2.QtWidgets import QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel\n\n\nverbose = 0\n\n# Fill the cardinal directions (N, S, E, W) first, then the diagonals\nslots = (\"n\", \"nw\", \"ne\", \"e\", \"w\", \"sw\", \"se\", \"s\")\ncamera = (\"camera\")\n\n\n# collect viewport info\ndesktop = hou.ui.curDesktop()\nscene_viewer = desktop.paneTabOfType(hou.paneTabType.SceneViewer)\nunder_cursor = desktop.paneTabUnderCursor()\nif(under_cursor.type().name() == \"SceneViewer\"):\n    scene_viewer = under_cursor\n    \nviewport = scene_viewer.curViewport()\nviewport_settings = viewport.settings()\n\nn = scene_viewer.pwd()\nt = n.type().name()\n\n\n\n\n# update Dialog Window (Qt)\ndef getHoudiniMainWindow():\n    return hou.qt.mainWindow()\n\nclass updateDialog(QMainWindow):\n    def __init__(self, parent=getHoudiniMainWindow()):\n        super(updateDialog,self).__init__(parent)\n        \n        self.setWindowTitle(\"Manual Update Mode\")\n        self.setMinimumSize(300, 80)\n        \n        button_update = QPushButton(\"Trigger Update Once\")\n        button_update.clicked.connect(self.triggerUpdate)\n       \n        button_set_auto = QPushButton(\"Switch Auto Update\")\n        button_set_auto.clicked.connect(self.setAutoUpdate)\n        \n        button_noupdate = QPushButton(\"Skip\")\n        button_noupdate.clicked.connect(self.close)\n        \n        message = QLabel(\"Changes will be visible after next update\", alignment=QtCore.Qt.Alignment(4))\n        layout = QVBoxLayout()\n        layout.addWidget(message)\n        layout.addWidget(button_update)\n        layout.addWidget(button_set_auto)\n        layout.addWidget(button_noupdate)\n        \n        widget = QWidget()\n        widget.setLayout(layout)\n        \n        self.setCentralWidget(widget)        \n        \n    def triggerUpdate(self):\n        hou.ui.triggerUpdate()\n        self.close()\n        \n        \n    def setAutoUpdate(self):\n        hou.setUpdateMode(hou.updateMode.AutoUpdate)\n        self.close()\n        \n# collect node infos\ncams = []\ndownstreamnodes = []    \n\n\ndef downstreamNodesFunc(n):\n    for i in n.outputs():\n        downstreamnodes.append(i)\n        downstreamNodesFunc(i)\n    return downstreamnodes\n    \n\n#----------------------LOPS----------------------   \nif t == \"stage\": \n    display = n.displayNode()\n    # get all up- and downstreamnodes \n    upstreamnodes = display.inputAncestors()\n    \n    downstreamNodesFunc(display)\n    allnodes = [display]\n    allnodes += upstreamnodes + tuple(downstreamnodes)\n    \n    for p in allnodes:\n        if p.type().name() == \"camera\":\n            cams.append(p)\n            \n#----------------------OBJ---------------------- \n\n# Get the node type object\nelse:\n    cams = []\n    obj_category = hou.nodeTypeCategories()[\"Object\"]\n    nodetype = hou.nodeType(obj_category, \"cam\")\n    cams.extend(nodetype.instances())\n    # print(cams)\n    \n    \n#--------------------COMMON-------------------     \n\n# Wrapper function\ndef selectFunc(cam):\n    # Returns a function that when called, selects the given light\n    def wrapper(**kwargs):\n        if t == \"stage\":\n            #in lops viewport needs a cameras primpath\n            primpath = cam.parm(\"primpath\").eval()\n            viewport.setCamera(primpath)\n        else: \n            #in obj viewport likes to have camera node\n            viewport.setCamera(cam)\n        if ( hou.updateModeSetting() == hou.updateMode.Manual):\n            window = updateDialog()\n            window.show()\n    return wrapper\n\n    \n\n\n# Build a menu from the most recent lights\nmenu = {}\nfor slot, cam in zip(slots, cams[:8]):    \n    menu[slot] = {\n        \"type\": \"script_action\",\n        \"label\": cam.name(),\n        \"icon\": cam.type().icon(),\n        \"script\": selectFunc(cam)\n    }\n \n    \n'''    \n#-------------LOCAL / GLOBAL MODE-----------------------\n\ndef setWorld():\n    def wrapper(**kwargs):\n        desktop = hou.ui.curDesktop()\n        scene_viewer = desktop.paneTabUnderCursor()\n        pane_name = scene_viewer.fullName()\n        hou.hscript(\"vieweroption -a 1 %s\" %pane_name)\n    return wrapper\n    \nmenu[\"n\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"World\",\n    \"icon\": \"VIEW_show_all\",\n    \"script\": setWorld(),\n    \"shortcut\": \"2\"\n    }   \n\ndef setLocal():\n    def wrapper(**kwargs):\n        desktop = hou.ui.curDesktop()\n        scene_viewer = desktop.paneTabUnderCursor()\n        pane_name = scene_viewer.fullName()\n        hou.hscript(\"vieweroption -a 0 %s\" %pane_name)\n    return wrapper    \n    \n    \nmenu[\"s\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"Local\",\n    \"icon\": \"VIEW_show_one\",\n    \"script\": setLocal(),\n    \"shortcut\": \"x\"\n    }\n'''\n    \n    \n'''\n#-------------SET BACKGROUND COLOR-----------------------\n\ndef setColorScheme():\n    def wrapper(**kwargs):\n        cur_color_scheme = viewport_settings.colorScheme()\n        if (cur_color_scheme == hou.viewportColorScheme.Light):\n            next_color_scheme = hou.viewportColorScheme.Dark\n        else: \n            next_color_scheme = hou.viewportColorScheme.Light\n        viewport_settings.setColorScheme(next_color_scheme) \n    return wrapper\n\nmenu[\"e\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"Background Color\",\n    \"icon\": \"BUTTONS_set_framerange\",\n    \"script\": setColorScheme(),\n    }\n'''\n\n\n'''\n#-------------SET GRID-----------------------\n    \ndef setGrid():\n    def wrapper(**kwargs):\n        grid = scene_viewer.referencePlane()\n        cur_state = grid.isVisible()\n        grid.setIsVisible(1-cur_state)  \n    return wrapper    \n  \nmenu[\"ne\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"Grid\",\n    \"icon\": \"SOP_grid\",\n    \"script\": setGrid(),\n    \"shortcut\": \"3\"\n    }   \n'''    \n    \n    \n'''   \n#-------------BG VISIBLE-----------------------\n\ndef setBGVisibility():\n    def wrapper(**kwargs):\n        cur_value = viewport_settings.displayBackgroundImage()\n        viewport_settings.setDisplayBackgroundImage(abs(cur_value-1)) \n    return wrapper\n\nmenu[\"nw\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"BG\",\n    \"icon\": \"VIEW_display_background\",\n    \"script\": setBGVisibility(),\n    \"shortcut\": \"1\"\n    }    \n'''  \n    \n''' \n#-------------ENVIRONMENT VISIBLE-----------------------\n\ndef setEnvironmentVisibility():\n    def wrapper(**kwargs):\n        cur_value = viewport_settings.displayEnvironmentBackgroundImage()\n        viewport_settings.setDisplayEnvironmentBackgroundImage(abs(cur_value-1)) \n    return wrapper\n\nmenu[\"sw\"] = {\n    \"type\": \"script_action\",\n    \"label\": \"Environment\",\n    \"icon\": \"VIEW_display_background\",\n    \"script\": setEnvironmentVisibility(),\n    }    \n'''  \n\n        \n#-------------DISPLAY SETTINGS (Submenu)-----------------------\n\ndef setEnvironmentVisibility():\n    def wrapper(**kwargs):\n        cur_value = viewport_settings.displayEnvironmentBackgroundImage()\n        viewport_settings.setDisplayEnvironmentBackgroundImage(abs(cur_value-1)) \n    return wrapper\n\nmenu[\"w\"] = {\n    \"type\": \"link\",\n    \"label\": \"Display Settings\",\n    \"icon\": \"TOOLS_select_visible\",\n    \"name\": \"huxel_sceneviewer_settings\",\n    \"shortcut\": \"A\"\n    }   \n    \n    \nradialmenu.setRadialMenu(menu)\n"
}
